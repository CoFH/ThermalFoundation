{  "name": "Custom Augments",  "icon": "minecraft:potato",  "category": "thermal:modpack",  "read_by_default": true,  "pages": [    {      "type": "text",      "text": "The augment system was created with modularity, customizability, and flexbility in mind. Augments are NBT-based, meaning you can assign any modifiers and values you want by modifying item NBT. In other words, there's nothing special about the augments that Thermal provides - literally any item can be an augment, assuming it has the relevant NBT data. Even a potato."    },    {      "type": "text",      "text": "Augments have a type and modifiers. The type determines what blocks the augment can be inserted into, and can also affect stackability. Read the $(l:thermal:technology/augments/introduction)intro on augments$(/l) for more information. If a type is not specified, no restrictions are placed on the augment."    },    {      "type": "text",      "text": "Modifiers are assigned to an item through attribute-value pairs, the attribute being the modifier and the value being the modifier amount. All values are floats, even if the modifier suggests it should be integral (e.g. potion strength). More on this later."    },    {      "type": "link",      "url": "https://github.com/KingLemming/1.16/blob/fe263e24b6f872bbacd7599c73f78ed44098d105/CoFHCore/src/main/java/cofh/lib/util/constants/NBTTags.java#L101",      "link_text": "Github Link",      "text": "The general form of the NBT is as follows: $(br2){AugmentData:$(br){Type:'[augment type]',$(br)[modifier 1]:[float value]f, $(br)[modifier 2]:[float value]f, $(br)[...]}}$(br2)A full list of available augment types and modifiers can be found in King Lemming's Github; link below. "    },    {      "type": "text",      "text": "So, for example, the command to make a machine augment that makes the energy of all recipes 0 (a creative machine augment, essentially) is as follows (click to execute command): $(br)$(c:/summon minecraft:item ~ ~ ~ {Item:{id:'minecraft:sea_pickle',Count:1b,tag:{AugmentData:{Type:'MchAug',MchEn:0.0f}}}})/give $(playername) minecraft:sea_pickle{AugmentData:{Type:'MchAug',MchEn:0.0f}} 1$(/c)$(br2)If there are multiple modifier-value pairs with the same modifier, the one that comes last takes precedence."    },    {      "type": "text",      "title": "A Note on Stacking",      "text": "Certain modifiers are unstackable - that is to say, if multiple augments on the same tool/block have the same modifier, the highest value will take precedence. These modifiers have their values $(n)underlined$(). Stackability is a trait inherent to the modifier type; for example, RFMax will always be unstackable and AERad will always be stackable, regardless of the values."    },    {      "type": "text",      "title": "A Note on Floats",      "text": "As mentioned earlier, all values are input as floats. This causes some interesting interactions with modifiers that seem to be integral. In these situations, the augment will display the value as the input float rounded to the nearest integer. However, the actual behavior of the tool/block might differ, depending on the modifier/value."    }  ]}